name: Deploy to EC2

on:
  push:
    branches:
      - main
      - feature/BAC-24

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Install Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.8'

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.DOCKER_IMAGE }} .

      - name: Save Docker Image
        run: |
          docker save -o ${{ vars.DOCKER_IMAGE }}.tar ${{ vars.DOCKER_IMAGE }}

      - name: Save Private Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 400 private_key.pem

      - name: Upload Docker Image
        run: |
          pwd
          ls
          scp -o StrictHostKeyChecking=no -i private_key.pem ${{ vars.DOCKER_IMAGE }}.tar ${{ vars.AWS_EC2_USER }}@${{ secrets.AWS_EC2_IP }}:/home/ubuntu

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ vars.AWS_EC2_USER }}@${{ secrets.AWS_EC2_IP }} << 'EOF'
            docker load -i ${{ vars.DOCKER_IMAGE }}.tar
            if [ $(docker ps -aq -f name=${{ vars.DOCKER_IMAGE }}) ]; then
                docker stop ${{ vars.DOCKER_IMAGE }}
                docker rm ${{ vars.DOCKER_IMAGE }}
            fi
            docker run -d --name ${{ vars.DOCKER_IMAGE }} -p 8080:8080 ${{ vars.DOCKER_IMAGE }}
          EOF
